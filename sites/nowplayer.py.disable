"""
NOT IMPLEMENTED
"""
import re
import requests
import classes as c
import utils as u
import os.path
from bs4 import BeautifulSoup

def _get_all_channels():
    query_url = 'https://nowplayer.now.com/channels'

    try:
        r = requests.get(query_url)
    except requests.exceptions.RequestException as e:
        raise SystemExit(e)
    if r.status_code != 200:
            raise Exception(r.raise_for_status())

    soup = BeautifulSoup(r.text,features="html.parser")
    divs = soup.find_all("div", {"class": "col-md-2 col-sm-3 product-item tv-guide-all"})

    channels = []
    for div in divs:
        obj = c.Channel(
            div.find("p", {"class": "channel"}).text.replace("CH",""),
            div.find("p", {"class": "img-name"}).text.strip(),
            div.find('img')['src']
        )
        channels.append(obj)

    return channels

def _get_program_details(programId):
    program_detail_url = "https://nowplayer.now.com/tvguide/epgprogramdetail?programId={programId}".format(programId=programId)

    try:
        r = requests.get(program_detail_url)
    except requests.exceptions.RequestException as e:
        raise SystemExit(e)
    output = r.json()

    if r.status_code != 200:
        raise Exception(r.raise_for_status())

    return output['engSynopsis'], output['engSeriesName']

def _get_episode_onscreen(title):
    try:
        print(title)
        season = re.search("[s]\d", title, re.IGNORECASE).group().upper()
        episode = re.search("Ep\d{2,5}", title, re.IGNORECASE).group().upper()
        onscreen = season+" "+episode
        return onscreen

    except AttributeError:
        return "" # We need to leave <episode> tag blank

def _get_clean_title(title):
    cleanup_ = re.sub("S\d{1,3}", "", title, re.IGNORECASE)
    cleanup = re.sub("Ep\d{2,5}", "", cleanup_, re.IGNORECASE)

    return cleanup.strip()

def generate():
    """
    Generate list of channel names for config.txt
    """
    site_name = os.path.basename(__file__).split(".")[0]

    try: 
        open(site_name+'_channels.txt').close()
    except FileNotFoundError: 
        pass 
    with open(site_name+'_channels.txt',"w") as infile:
        for channel in _get_all_channels():
            infile.write(
                site_name+";"+  
                channel.name.replace(" ", "")+   
                "\n"
                )
        infile.close()

    print("channels.txt for "+site_name+" succesfully generated. ("+str(len(_get_all_channels()))+" channels)")

def get_channelinfo_by_name(channelName):
    """
    Get full information of channel Eg: for XMLTV parsing
    """
    for channel in _get_all_channels():
        if channel.name.lower().replace(" ","") == channelName.lower():
            return channel

    raise Exception("Channel "+channelName+" not found!")

def get_channelid_by_name(channelName):
    for channel in _get_all_channels():
        if channel.name.lower().replace(" ","") == channelName.lower():
            return channel.id
    
    raise Exception("Channel "+channelName+" not found!")

def get_programs_by_channel(channelName, *args):
    if args:
        days = args[0]
        if days > 7:
            days = 7
    else:
        days = 1
    
    channel_url = "https://nowplayer.now.com/tvguide/epglist?channelIdList={id}&day={days}".format(id=get_channelid_by_name(channelName),days=days)

    try:
        r = requests.get(channel_url)
        # await asyncio.sleep(5)
    except requests.exceptions.RequestException as e:
        raise SystemExit(e)

    output = r.json()

    if r.status_code != 200:
        raise Exception(r.raise_for_status())
    
    program_json = output[0]
    programs = []
    for program in program_json:
        obj = c.Program (
            get_channelinfo_by_name(channelName).name, # This converts the channel name back to whitespaces,
            _get_program_details(program['vimProgramId'])[1],
            _get_program_details(program['vimProgramId'])[0],
            u.get_epg_datetime(program['start']),
            u.get_epg_datetime(program['end']),
            "" # TODO: episode
        )
        programs.append(obj)
            
    return programs
